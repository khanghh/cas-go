// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/khanghh/cas-go/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newUserFactor(db *gorm.DB, opts ...gen.DOOption) userFactor {
	_userFactor := userFactor{}

	_userFactor.userFactorDo.UseDB(db, opts...)
	_userFactor.userFactorDo.UseModel(&model.UserFactor{})

	tableName := _userFactor.userFactorDo.TableName()
	_userFactor.ALL = field.NewAsterisk(tableName)
	_userFactor.ID = field.NewUint(tableName, "id")
	_userFactor.UserID = field.NewUint(tableName, "user_id")
	_userFactor.Type = field.NewString(tableName, "type")
	_userFactor.Secret = field.NewString(tableName, "secret")
	_userFactor.Enabled = field.NewBool(tableName, "enabled")
	_userFactor.CreatedAt = field.NewTime(tableName, "created_at")
	_userFactor.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userFactor.DeletedAt = field.NewField(tableName, "deleted_at")

	_userFactor.fillFieldMap()

	return _userFactor
}

type userFactor struct {
	userFactorDo

	ALL       field.Asterisk
	ID        field.Uint
	UserID    field.Uint
	Type      field.String
	Secret    field.String
	Enabled   field.Bool
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (u userFactor) Table(newTableName string) *userFactor {
	u.userFactorDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userFactor) As(alias string) *userFactor {
	u.userFactorDo.DO = *(u.userFactorDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userFactor) updateTableName(table string) *userFactor {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.UserID = field.NewUint(table, "user_id")
	u.Type = field.NewString(table, "type")
	u.Secret = field.NewString(table, "secret")
	u.Enabled = field.NewBool(table, "enabled")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userFactor) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userFactor) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["type"] = u.Type
	u.fieldMap["secret"] = u.Secret
	u.fieldMap["enabled"] = u.Enabled
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userFactor) clone(db *gorm.DB) userFactor {
	u.userFactorDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userFactor) replaceDB(db *gorm.DB) userFactor {
	u.userFactorDo.ReplaceDB(db)
	return u
}

type userFactorDo struct{ gen.DO }

func (u userFactorDo) Debug() *userFactorDo {
	return u.withDO(u.DO.Debug())
}

func (u userFactorDo) WithContext(ctx context.Context) *userFactorDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userFactorDo) ReadDB() *userFactorDo {
	return u.Clauses(dbresolver.Read)
}

func (u userFactorDo) WriteDB() *userFactorDo {
	return u.Clauses(dbresolver.Write)
}

func (u userFactorDo) Session(config *gorm.Session) *userFactorDo {
	return u.withDO(u.DO.Session(config))
}

func (u userFactorDo) Clauses(conds ...clause.Expression) *userFactorDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userFactorDo) Returning(value interface{}, columns ...string) *userFactorDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userFactorDo) Not(conds ...gen.Condition) *userFactorDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userFactorDo) Or(conds ...gen.Condition) *userFactorDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userFactorDo) Select(conds ...field.Expr) *userFactorDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userFactorDo) Where(conds ...gen.Condition) *userFactorDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userFactorDo) Order(conds ...field.Expr) *userFactorDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userFactorDo) Distinct(cols ...field.Expr) *userFactorDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userFactorDo) Omit(cols ...field.Expr) *userFactorDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userFactorDo) Join(table schema.Tabler, on ...field.Expr) *userFactorDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userFactorDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userFactorDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userFactorDo) RightJoin(table schema.Tabler, on ...field.Expr) *userFactorDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userFactorDo) Group(cols ...field.Expr) *userFactorDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userFactorDo) Having(conds ...gen.Condition) *userFactorDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userFactorDo) Limit(limit int) *userFactorDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userFactorDo) Offset(offset int) *userFactorDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userFactorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userFactorDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userFactorDo) Unscoped() *userFactorDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userFactorDo) Create(values ...*model.UserFactor) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userFactorDo) CreateInBatches(values []*model.UserFactor, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userFactorDo) Save(values ...*model.UserFactor) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userFactorDo) First() (*model.UserFactor, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFactor), nil
	}
}

func (u userFactorDo) Take() (*model.UserFactor, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFactor), nil
	}
}

func (u userFactorDo) Last() (*model.UserFactor, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFactor), nil
	}
}

func (u userFactorDo) Find() ([]*model.UserFactor, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserFactor), err
}

func (u userFactorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserFactor, err error) {
	buf := make([]*model.UserFactor, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userFactorDo) FindInBatches(result *[]*model.UserFactor, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userFactorDo) Attrs(attrs ...field.AssignExpr) *userFactorDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userFactorDo) Assign(attrs ...field.AssignExpr) *userFactorDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userFactorDo) Joins(fields ...field.RelationField) *userFactorDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userFactorDo) Preload(fields ...field.RelationField) *userFactorDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userFactorDo) FirstOrInit() (*model.UserFactor, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFactor), nil
	}
}

func (u userFactorDo) FirstOrCreate() (*model.UserFactor, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFactor), nil
	}
}

func (u userFactorDo) FindByPage(offset int, limit int) (result []*model.UserFactor, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userFactorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userFactorDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userFactorDo) Delete(models ...*model.UserFactor) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userFactorDo) withDO(do gen.Dao) *userFactorDo {
	u.DO = *do.(*gen.DO)
	return u
}
