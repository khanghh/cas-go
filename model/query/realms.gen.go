// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/khanghh/cas-go/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newRealm(db *gorm.DB, opts ...gen.DOOption) realm {
	_realm := realm{}

	_realm.realmDo.UseDB(db, opts...)
	_realm.realmDo.UseModel(&model.Realm{})

	tableName := _realm.realmDo.TableName()
	_realm.ALL = field.NewAsterisk(tableName)
	_realm.ID = field.NewUint(tableName, "id")
	_realm.CreatedAt = field.NewTime(tableName, "created_at")
	_realm.UpdatedAt = field.NewTime(tableName, "updated_at")
	_realm.DeletedAt = field.NewField(tableName, "deleted_at")
	_realm.Name = field.NewString(tableName, "name")
	_realm.DisplayName = field.NewString(tableName, "display_name")

	_realm.fillFieldMap()

	return _realm
}

type realm struct {
	realmDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Name        field.String
	DisplayName field.String

	fieldMap map[string]field.Expr
}

func (r realm) Table(newTableName string) *realm {
	r.realmDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r realm) As(alias string) *realm {
	r.realmDo.DO = *(r.realmDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *realm) updateTableName(table string) *realm {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint(table, "id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")
	r.Name = field.NewString(table, "name")
	r.DisplayName = field.NewString(table, "display_name")

	r.fillFieldMap()

	return r
}

func (r *realm) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *realm) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 6)
	r.fieldMap["id"] = r.ID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["name"] = r.Name
	r.fieldMap["display_name"] = r.DisplayName
}

func (r realm) clone(db *gorm.DB) realm {
	r.realmDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r realm) replaceDB(db *gorm.DB) realm {
	r.realmDo.ReplaceDB(db)
	return r
}

type realmDo struct{ gen.DO }

func (r realmDo) Debug() *realmDo {
	return r.withDO(r.DO.Debug())
}

func (r realmDo) WithContext(ctx context.Context) *realmDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r realmDo) ReadDB() *realmDo {
	return r.Clauses(dbresolver.Read)
}

func (r realmDo) WriteDB() *realmDo {
	return r.Clauses(dbresolver.Write)
}

func (r realmDo) Session(config *gorm.Session) *realmDo {
	return r.withDO(r.DO.Session(config))
}

func (r realmDo) Clauses(conds ...clause.Expression) *realmDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r realmDo) Returning(value interface{}, columns ...string) *realmDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r realmDo) Not(conds ...gen.Condition) *realmDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r realmDo) Or(conds ...gen.Condition) *realmDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r realmDo) Select(conds ...field.Expr) *realmDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r realmDo) Where(conds ...gen.Condition) *realmDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r realmDo) Order(conds ...field.Expr) *realmDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r realmDo) Distinct(cols ...field.Expr) *realmDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r realmDo) Omit(cols ...field.Expr) *realmDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r realmDo) Join(table schema.Tabler, on ...field.Expr) *realmDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r realmDo) LeftJoin(table schema.Tabler, on ...field.Expr) *realmDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r realmDo) RightJoin(table schema.Tabler, on ...field.Expr) *realmDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r realmDo) Group(cols ...field.Expr) *realmDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r realmDo) Having(conds ...gen.Condition) *realmDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r realmDo) Limit(limit int) *realmDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r realmDo) Offset(offset int) *realmDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r realmDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *realmDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r realmDo) Unscoped() *realmDo {
	return r.withDO(r.DO.Unscoped())
}

func (r realmDo) Create(values ...*model.Realm) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r realmDo) CreateInBatches(values []*model.Realm, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r realmDo) Save(values ...*model.Realm) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r realmDo) First() (*model.Realm, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Realm), nil
	}
}

func (r realmDo) Take() (*model.Realm, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Realm), nil
	}
}

func (r realmDo) Last() (*model.Realm, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Realm), nil
	}
}

func (r realmDo) Find() ([]*model.Realm, error) {
	result, err := r.DO.Find()
	return result.([]*model.Realm), err
}

func (r realmDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Realm, err error) {
	buf := make([]*model.Realm, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r realmDo) FindInBatches(result *[]*model.Realm, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r realmDo) Attrs(attrs ...field.AssignExpr) *realmDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r realmDo) Assign(attrs ...field.AssignExpr) *realmDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r realmDo) Joins(fields ...field.RelationField) *realmDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r realmDo) Preload(fields ...field.RelationField) *realmDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r realmDo) FirstOrInit() (*model.Realm, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Realm), nil
	}
}

func (r realmDo) FirstOrCreate() (*model.Realm, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Realm), nil
	}
}

func (r realmDo) FindByPage(offset int, limit int) (result []*model.Realm, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r realmDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r realmDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r realmDo) Delete(models ...*model.Realm) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *realmDo) withDO(do gen.Dao) *realmDo {
	r.DO = *do.(*gen.DO)
	return r
}
