// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/khanghh/cas-go/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPendingUser(db *gorm.DB, opts ...gen.DOOption) pendingUser {
	_pendingUser := pendingUser{}

	_pendingUser.pendingUserDo.UseDB(db, opts...)
	_pendingUser.pendingUserDo.UseModel(&model.PendingUser{})

	tableName := _pendingUser.pendingUserDo.TableName()
	_pendingUser.ALL = field.NewAsterisk(tableName)
	_pendingUser.ID = field.NewUint(tableName, "id")
	_pendingUser.Username = field.NewString(tableName, "username")
	_pendingUser.FullName = field.NewString(tableName, "full_name")
	_pendingUser.Email = field.NewString(tableName, "email")
	_pendingUser.Password = field.NewString(tableName, "password")
	_pendingUser.Picture = field.NewString(tableName, "picture")
	_pendingUser.ActiveToken = field.NewString(tableName, "active_token")
	_pendingUser.Approved = field.NewBool(tableName, "approved")
	_pendingUser.CreatedAt = field.NewTime(tableName, "created_at")
	_pendingUser.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pendingUser.DeletedAt = field.NewField(tableName, "deleted_at")

	_pendingUser.fillFieldMap()

	return _pendingUser
}

type pendingUser struct {
	pendingUserDo

	ALL         field.Asterisk
	ID          field.Uint
	Username    field.String
	FullName    field.String
	Email       field.String
	Password    field.String
	Picture     field.String
	ActiveToken field.String
	Approved    field.Bool
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (p pendingUser) Table(newTableName string) *pendingUser {
	p.pendingUserDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pendingUser) As(alias string) *pendingUser {
	p.pendingUserDo.DO = *(p.pendingUserDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pendingUser) updateTableName(table string) *pendingUser {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.Username = field.NewString(table, "username")
	p.FullName = field.NewString(table, "full_name")
	p.Email = field.NewString(table, "email")
	p.Password = field.NewString(table, "password")
	p.Picture = field.NewString(table, "picture")
	p.ActiveToken = field.NewString(table, "active_token")
	p.Approved = field.NewBool(table, "approved")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *pendingUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pendingUser) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 11)
	p.fieldMap["id"] = p.ID
	p.fieldMap["username"] = p.Username
	p.fieldMap["full_name"] = p.FullName
	p.fieldMap["email"] = p.Email
	p.fieldMap["password"] = p.Password
	p.fieldMap["picture"] = p.Picture
	p.fieldMap["active_token"] = p.ActiveToken
	p.fieldMap["approved"] = p.Approved
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p pendingUser) clone(db *gorm.DB) pendingUser {
	p.pendingUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pendingUser) replaceDB(db *gorm.DB) pendingUser {
	p.pendingUserDo.ReplaceDB(db)
	return p
}

type pendingUserDo struct{ gen.DO }

func (p pendingUserDo) Debug() *pendingUserDo {
	return p.withDO(p.DO.Debug())
}

func (p pendingUserDo) WithContext(ctx context.Context) *pendingUserDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pendingUserDo) ReadDB() *pendingUserDo {
	return p.Clauses(dbresolver.Read)
}

func (p pendingUserDo) WriteDB() *pendingUserDo {
	return p.Clauses(dbresolver.Write)
}

func (p pendingUserDo) Session(config *gorm.Session) *pendingUserDo {
	return p.withDO(p.DO.Session(config))
}

func (p pendingUserDo) Clauses(conds ...clause.Expression) *pendingUserDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pendingUserDo) Returning(value interface{}, columns ...string) *pendingUserDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pendingUserDo) Not(conds ...gen.Condition) *pendingUserDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pendingUserDo) Or(conds ...gen.Condition) *pendingUserDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pendingUserDo) Select(conds ...field.Expr) *pendingUserDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pendingUserDo) Where(conds ...gen.Condition) *pendingUserDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pendingUserDo) Order(conds ...field.Expr) *pendingUserDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pendingUserDo) Distinct(cols ...field.Expr) *pendingUserDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pendingUserDo) Omit(cols ...field.Expr) *pendingUserDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pendingUserDo) Join(table schema.Tabler, on ...field.Expr) *pendingUserDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pendingUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pendingUserDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pendingUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *pendingUserDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pendingUserDo) Group(cols ...field.Expr) *pendingUserDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pendingUserDo) Having(conds ...gen.Condition) *pendingUserDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pendingUserDo) Limit(limit int) *pendingUserDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pendingUserDo) Offset(offset int) *pendingUserDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pendingUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pendingUserDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pendingUserDo) Unscoped() *pendingUserDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pendingUserDo) Create(values ...*model.PendingUser) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pendingUserDo) CreateInBatches(values []*model.PendingUser, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pendingUserDo) Save(values ...*model.PendingUser) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pendingUserDo) First() (*model.PendingUser, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PendingUser), nil
	}
}

func (p pendingUserDo) Take() (*model.PendingUser, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PendingUser), nil
	}
}

func (p pendingUserDo) Last() (*model.PendingUser, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PendingUser), nil
	}
}

func (p pendingUserDo) Find() ([]*model.PendingUser, error) {
	result, err := p.DO.Find()
	return result.([]*model.PendingUser), err
}

func (p pendingUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PendingUser, err error) {
	buf := make([]*model.PendingUser, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pendingUserDo) FindInBatches(result *[]*model.PendingUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pendingUserDo) Attrs(attrs ...field.AssignExpr) *pendingUserDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pendingUserDo) Assign(attrs ...field.AssignExpr) *pendingUserDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pendingUserDo) Joins(fields ...field.RelationField) *pendingUserDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pendingUserDo) Preload(fields ...field.RelationField) *pendingUserDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pendingUserDo) FirstOrInit() (*model.PendingUser, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PendingUser), nil
	}
}

func (p pendingUserDo) FirstOrCreate() (*model.PendingUser, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PendingUser), nil
	}
}

func (p pendingUserDo) FindByPage(offset int, limit int) (result []*model.PendingUser, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pendingUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pendingUserDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pendingUserDo) Delete(models ...*model.PendingUser) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pendingUserDo) withDO(do gen.Dao) *pendingUserDo {
	p.DO = *do.(*gen.DO)
	return p
}
