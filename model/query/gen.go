// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q           = new(Query)
	PendingUser *pendingUser
	Service     *service
	Token       *token
	User        *user
	UserOAuth   *userOAuth
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	PendingUser = &Q.PendingUser
	Service = &Q.Service
	Token = &Q.Token
	User = &Q.User
	UserOAuth = &Q.UserOAuth
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:          db,
		PendingUser: newPendingUser(db, opts...),
		Service:     newService(db, opts...),
		Token:       newToken(db, opts...),
		User:        newUser(db, opts...),
		UserOAuth:   newUserOAuth(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	PendingUser pendingUser
	Service     service
	Token       token
	User        user
	UserOAuth   userOAuth
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		PendingUser: q.PendingUser.clone(db),
		Service:     q.Service.clone(db),
		Token:       q.Token.clone(db),
		User:        q.User.clone(db),
		UserOAuth:   q.UserOAuth.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		PendingUser: q.PendingUser.replaceDB(db),
		Service:     q.Service.replaceDB(db),
		Token:       q.Token.replaceDB(db),
		User:        q.User.replaceDB(db),
		UserOAuth:   q.UserOAuth.replaceDB(db),
	}
}

type queryCtx struct {
	PendingUser *pendingUserDo
	Service     *serviceDo
	Token       *tokenDo
	User        *userDo
	UserOAuth   *userOAuthDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		PendingUser: q.PendingUser.WithContext(ctx),
		Service:     q.Service.WithContext(ctx),
		Token:       q.Token.WithContext(ctx),
		User:        q.User.WithContext(ctx),
		UserOAuth:   q.UserOAuth.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
