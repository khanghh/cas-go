// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/khanghh/cas-go/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newUserOAuth(db *gorm.DB, opts ...gen.DOOption) userOAuth {
	_userOAuth := userOAuth{}

	_userOAuth.userOAuthDo.UseDB(db, opts...)
	_userOAuth.userOAuthDo.UseModel(&model.UserOAuth{})

	tableName := _userOAuth.userOAuthDo.TableName()
	_userOAuth.ALL = field.NewAsterisk(tableName)
	_userOAuth.ID = field.NewUint(tableName, "id")
	_userOAuth.CreatedAt = field.NewTime(tableName, "created_at")
	_userOAuth.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userOAuth.DeletedAt = field.NewField(tableName, "deleted_at")
	_userOAuth.OAuthId = field.NewString(tableName, "o_auth_id")
	_userOAuth.UserId = field.NewUint(tableName, "user_id")
	_userOAuth.Provider = field.NewString(tableName, "provider")
	_userOAuth.Email = field.NewString(tableName, "email")
	_userOAuth.Name = field.NewString(tableName, "name")
	_userOAuth.Picture = field.NewString(tableName, "picture")

	_userOAuth.fillFieldMap()

	return _userOAuth
}

type userOAuth struct {
	userOAuthDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	OAuthId   field.String
	UserId    field.Uint
	Provider  field.String
	Email     field.String
	Name      field.String
	Picture   field.String

	fieldMap map[string]field.Expr
}

func (u userOAuth) Table(newTableName string) *userOAuth {
	u.userOAuthDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userOAuth) As(alias string) *userOAuth {
	u.userOAuthDo.DO = *(u.userOAuthDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userOAuth) updateTableName(table string) *userOAuth {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.OAuthId = field.NewString(table, "o_auth_id")
	u.UserId = field.NewUint(table, "user_id")
	u.Provider = field.NewString(table, "provider")
	u.Email = field.NewString(table, "email")
	u.Name = field.NewString(table, "name")
	u.Picture = field.NewString(table, "picture")

	u.fillFieldMap()

	return u
}

func (u *userOAuth) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userOAuth) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["o_auth_id"] = u.OAuthId
	u.fieldMap["user_id"] = u.UserId
	u.fieldMap["provider"] = u.Provider
	u.fieldMap["email"] = u.Email
	u.fieldMap["name"] = u.Name
	u.fieldMap["picture"] = u.Picture
}

func (u userOAuth) clone(db *gorm.DB) userOAuth {
	u.userOAuthDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userOAuth) replaceDB(db *gorm.DB) userOAuth {
	u.userOAuthDo.ReplaceDB(db)
	return u
}

type userOAuthDo struct{ gen.DO }

func (u userOAuthDo) Debug() *userOAuthDo {
	return u.withDO(u.DO.Debug())
}

func (u userOAuthDo) WithContext(ctx context.Context) *userOAuthDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userOAuthDo) ReadDB() *userOAuthDo {
	return u.Clauses(dbresolver.Read)
}

func (u userOAuthDo) WriteDB() *userOAuthDo {
	return u.Clauses(dbresolver.Write)
}

func (u userOAuthDo) Session(config *gorm.Session) *userOAuthDo {
	return u.withDO(u.DO.Session(config))
}

func (u userOAuthDo) Clauses(conds ...clause.Expression) *userOAuthDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userOAuthDo) Returning(value interface{}, columns ...string) *userOAuthDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userOAuthDo) Not(conds ...gen.Condition) *userOAuthDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userOAuthDo) Or(conds ...gen.Condition) *userOAuthDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userOAuthDo) Select(conds ...field.Expr) *userOAuthDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userOAuthDo) Where(conds ...gen.Condition) *userOAuthDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userOAuthDo) Order(conds ...field.Expr) *userOAuthDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userOAuthDo) Distinct(cols ...field.Expr) *userOAuthDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userOAuthDo) Omit(cols ...field.Expr) *userOAuthDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userOAuthDo) Join(table schema.Tabler, on ...field.Expr) *userOAuthDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userOAuthDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userOAuthDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userOAuthDo) RightJoin(table schema.Tabler, on ...field.Expr) *userOAuthDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userOAuthDo) Group(cols ...field.Expr) *userOAuthDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userOAuthDo) Having(conds ...gen.Condition) *userOAuthDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userOAuthDo) Limit(limit int) *userOAuthDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userOAuthDo) Offset(offset int) *userOAuthDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userOAuthDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userOAuthDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userOAuthDo) Unscoped() *userOAuthDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userOAuthDo) Create(values ...*model.UserOAuth) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userOAuthDo) CreateInBatches(values []*model.UserOAuth, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userOAuthDo) Save(values ...*model.UserOAuth) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userOAuthDo) First() (*model.UserOAuth, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOAuth), nil
	}
}

func (u userOAuthDo) Take() (*model.UserOAuth, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOAuth), nil
	}
}

func (u userOAuthDo) Last() (*model.UserOAuth, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOAuth), nil
	}
}

func (u userOAuthDo) Find() ([]*model.UserOAuth, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserOAuth), err
}

func (u userOAuthDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserOAuth, err error) {
	buf := make([]*model.UserOAuth, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userOAuthDo) FindInBatches(result *[]*model.UserOAuth, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userOAuthDo) Attrs(attrs ...field.AssignExpr) *userOAuthDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userOAuthDo) Assign(attrs ...field.AssignExpr) *userOAuthDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userOAuthDo) Joins(fields ...field.RelationField) *userOAuthDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userOAuthDo) Preload(fields ...field.RelationField) *userOAuthDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userOAuthDo) FirstOrInit() (*model.UserOAuth, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOAuth), nil
	}
}

func (u userOAuthDo) FirstOrCreate() (*model.UserOAuth, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOAuth), nil
	}
}

func (u userOAuthDo) FindByPage(offset int, limit int) (result []*model.UserOAuth, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userOAuthDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userOAuthDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userOAuthDo) Delete(models ...*model.UserOAuth) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userOAuthDo) withDO(do gen.Dao) *userOAuthDo {
	u.DO = *do.(*gen.DO)
	return u
}
